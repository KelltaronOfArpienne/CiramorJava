/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import java.awt.Dimension;
import java.awt.Toolkit;

/**
 *
 * @author yan-r
 */
public class HelpScreen extends javax.swing.JFrame {

    /**
     * Creates new form HelpScreen
     */
    public HelpScreen() {
        initComponents();
        centralizarComponente();
    }
private void centralizarComponente() {
        Dimension ds = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension dw = getSize();
        setLocation((ds.width - dw.width) / 2, (ds.height - dw.height) / 2);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("What is the Experimental Content");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setTabSize(6);
        jTextArea1.setText("What is the Experimental Content?\n\nThe experimental content is a feature from Ciramolator what adds many things \nthe game do not have, to you test, till now they are:\n\n-> a 4th dice cost in abilities\n-> a Blessing Seal\n-> 3 new abilities types:\n\t-Sacred <abilities>: The ability's value is increased by 50% if your hero \n\t\t      holds any negative effect.\n\t- Timed <abilities>: The ability's value is increased by 25% per each past \n\t\t      turn in the game.\n\t-Freaky <abilities>: The ability's value is increased by 30% per each \n\t\t      Shadow on the opponent, and the Shadows are consumed.\n-> 10 new abilities:\n\t-Avenge [VALUE]: Deals X DMG, +50% if you are losing the game.\n\t\n\t-Dispel <opp buff>: Remove a specific positive effect from opponent\n\t\n\t-Explode [VALUE]: Deals X DMG, if your opponent holds a powder token, \n\t\tincrease this damage in 40%, otherwise add a powder token to it.\n\t\t\n\t-Fatigue [VALUE]: Deals X DMG and the opponent has DMG -X in his next \n\t\tmodifiable damage.\n\t\t\n\t-Heroism [VALUE]: Deals X DMG, +50% if you are winning the game.\n\t\t\n\t-Iceball [VALUE]: Deals X DMG, your opponent gets 1 Frost, and you get \n\t\tDMG +10 for each Frost.\n\t\t\n\t-Kagejutsu [VALUE]:  Deals X DMG, +20% per different positive effect on \n\t\tyour opponent.\n\t\t\n\t-Pierce [VALUE]: Deals X DMG and the next time your opponent suffer damage,\n\t\tthe damage will be increased by X/2.\n\t\t\n\t-Restore [VALUE]: Heals X for each different positive effect you owm.\n\t\n\t-Shadow [VALUE]: Add X Shadows to your opponent. At end of abilities \n\t\t      activation phase, each Shadow inflicts 300 unmodifiable \n\t\t      damage.\n\t\t");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HelpScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HelpScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HelpScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HelpScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HelpScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
